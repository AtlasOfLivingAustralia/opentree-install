- name: checking if neo4j treemachine instance exist
  stat: path="{{neo4jExec}}"
  register: neo4j

- name: stop treemachine
  command: "{{neo4jExec}} stop"
  when: neo4j.stat.exists == True

- name: checking if ot-base is cloned
  stat: path="{{appDir}}"
  register: treemachine

- name: git clone treemachine
  git: repo="{{treemachineUrl}}"
       dest="{{appDir}}"
  when: treemachine.stat.exists == false


- name: make treemachine plugin
  shell: "sh mvn_serverplugins.sh"
  args:
    chdir: "{{appDir}}"

- name: copy files into server
  command: "cp {{appDir}}/target/{{jarFile}} {{treePluginDir}}"

- name: setting config
  action: copy src=neo4j-server.properties dest="{{configDir}}"

- name: downloading taxonomy
  command: "wget {{taxonomy}}"
  args:
    chdir: "{{downloadDir}}"
    creates: ottol_dumpv1_w_preottol_ids_uniqunames.tar.gz

- name: extracting taxonomy
  command: tar xf ottol_dumpv1_w_preottol_ids_uniqunames.tar.gz
  args:
    chdir: "{{downloadDir}}"

# copying compiled file since cannot compile since maven returns an error. currently copying compiled file to server
- name: compiling treemachine
#  command: "./mvn_cmdline.sh"
  copy: src=treemachine-0.0.1-SNAPSHOT-jar-with-dependencies.jar dest="{{downloadDir}}/target"
#  args:
#    chdir: "{{downloadDir}}"

- name: delete database
  command: "rm -rf {{downloadDir}}/{{dbName}}"
  when: deleteDb == True

- name: creating graph database
  command: "java -Xmx3G -jar target/treemachine-0.0.1-SNAPSHOT-jar-with-dependencies.jar inittax ottol_dump_w_uniquenames_preottol_ids ottol_dump.synonyms {{dbName}}"
  args:
    chdir: "{{downloadDir}}"
    creates: "{{dbName}}"

- name: start treemachine
  command: "{{neo4jExec}} start"